local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Solara Executor",
   LoadingTitle = "Solara",
   LoadingSubtitle = "by solara",
   ConfigurationSaving = {Enabled = false},
   Discord = {Enabled = false},
   KeySystem = false
})

local MainTab = Window:CreateTab("Main")
local ESPTab = Window:CreateTab("ESP")
local DesyncTab = Window:CreateTab("Desync")
local AimbotTab = Window:CreateTab("Aimbot")

local espEnabled = false
local desyncEnabled = false
local showBoxes = true
local showBones = true
local showHighlight = true
local showNames = true
local showDistance = true
local showTracers = false
local autoRefresh = true
local espFolders = {}
local desyncConnection = nil
local refreshConnection = nil
local aimbotEnabled = false
local aimbotKey = "RightMouseButton"
local aimbotFOV = 50
local aimbotPrediction = 0.1
local aimbotSmoothness = 0.5
local silentAimEnabled = false
local silentAimFOV = 100
local flyEnabled = false
local flySpeed = 50
local flyConnection = nil
local jumpPowerEnabled = false
local jumpPowerValue = 100
local speedEnabled = false
local speedValue = 50
local noClipEnabled = false
local noClipConnection = nil
local noclipDesyncEnabled = false
local noclipDesyncConnection = nil
local autoStompEnabled = false
local autoStompConnection = nil
local espColor = Color3.new(1, 0, 0)
local teamCheck = true

local function createESP(player)
    if espFolders[player] then return end
    
    local folder = Instance.new("Folder")
    folder.Name = player.Name .. "_ESP"
    espFolders[player] = folder
    
    local function updateESP()
        if not espEnabled or not player.Character then 
            folder:ClearAllChildren()
            return
        end
        
        local character = player.Character
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        
        if not humanoidRootPart or not humanoid or humanoid.Health <= 0 then
            folder:ClearAllChildren()
            return
        end
        
        local localPlayer = Players.LocalPlayer
        local localCharacter = localPlayer.Character
        local localRoot = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
        
        if showHighlight and not folder:FindFirstChild("Highlight") then
            local highlight = Instance.new("Highlight")
            highlight.Name = "Highlight"
            highlight.FillColor = teamCheck and (player.Team == localPlayer.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)) or espColor
            highlight.OutlineColor = Color3.new(1, 1, 1)
            highlight.FillTransparency = 0.5
            highlight.Parent = folder
        end
        
        if showBoxes and not folder:FindFirstChild("Box") then
            local box = Instance.new("BoxHandleAdornment")
            box.Name = "Box"
            box.Adornee = humanoidRootPart
            box.Size = Vector3.new(4, 6, 2)
            box.Color3 = teamCheck and (player.Team == localPlayer.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)) or espColor
            box.Transparency = 0.3
            box.AlwaysOnTop = true
            box.Parent = folder
        end
        
        if showBones then
            if folder:FindFirstChild("Bones") then
                folder.Bones:Destroy()
            end
            local bonesFolder = Instance.new("Folder")
            bonesFolder.Name = "Bones"
            bonesFolder.Parent = folder
            
            local boneConnections = {
                {"Head", "UpperTorso"},
                {"UpperTorso", "LowerTorso"},
                {"UpperTorso", "LeftUpperArm"},
                {"LeftUpperArm", "LeftLowerArm"},
                {"LeftLowerArm", "LeftHand"},
                {"UpperTorso", "RightUpperArm"},
                {"RightUpperArm", "RightLowerArm"},
                {"RightLowerArm", "RightHand"},
                {"LowerTorso", "LeftUpperLeg"},
                {"LeftUpperLeg", "LeftLowerLeg"},
                {"LeftLowerLeg", "LeftFoot"},
                {"LowerTorso", "RightUpperLeg"},
                {"RightUpperLeg", "RightLowerLeg"},
                {"RightLowerLeg", "RightFoot"}
            }
            
            for _, connection in pairs(boneConnections) do
                local part1 = character:FindFirstChild(connection[1])
                local part2 = character:FindFirstChild(connection[2])
                
                if part1 and part2 then
                    local beam = Instance.new("Beam")
                    beam.Attachment0 = Instance.new("Attachment")
                    beam.Attachment0.Parent = part1
                    beam.Attachment1 = Instance.new("Attachment")
                    beam.Attachment1.Parent = part2
                    beam.Color = ColorSequence.new(teamCheck and (player.Team == localPlayer.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)) or espColor)
                    beam.Width0 = 0.1
                    beam.Width1 = 0.1
                    beam.Parent = bonesFolder
                end
            end
        end
        
        if (showNames or showDistance) and localRoot then
            if folder:FindFirstChild("Billboard") then
                folder.Billboard:Destroy()
            end
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "Billboard"
            billboard.Adornee = humanoidRootPart
            billboard.Size = UDim2.new(0, 200, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 3, 0)
            billboard.AlwaysOnTop = true
            
            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.TextStrokeTransparency = 0
            textLabel.TextSize = 14
            textLabel.Font = Enum.Font.GothamBold
            textLabel.TextColor3 = teamCheck and (player.Team == localPlayer.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)) or espColor
            
            local distance = (humanoidRootPart.Position - localRoot.Position).Magnitude
            local text = ""
            if showNames then text = player.Name end
            if showDistance then text = text .. (showNames and " (" or "") .. math.floor(distance) .. "m" .. (showNames and ")" or "") end
            
            textLabel.Text = text
            textLabel.Parent = billboard
            billboard.Parent = folder
        end
    end
    
    folder.Parent = workspace
    updateESP()
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        updateESP()
    end)
    
    player.CharacterAdded:Connect(function()
        wait(1)
        updateESP()
    end)
end

local function removeESP(player)
    if espFolders[player] then
        espFolders[player]:Destroy()
        espFolders[player] = nil
    end
end

local function toggleESP(state)
    espEnabled = state
    if state then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer then
                createESP(player)
            end
        end
    else
        for _, player in ipairs(Players:GetPlayers()) do
            removeESP(player)
        end
    end
end

local function startDesync()
    if desyncConnection then return end
    
    desyncConnection = RunService.Heartbeat:Connect(function()
        if not desyncEnabled or not Players.LocalPlayer.Character then return end
        
        local character = Players.LocalPlayer.Character
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        
        if humanoid and rootPart then
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            task.wait()
            humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
    end)
end

local function stopDesync()
    if desyncConnection then
        desyncConnection:Disconnect()
        desyncConnection = nil
    end
end

local function toggleDesync(state)
    desyncEnabled = state
    if state then
        startDesync()
    else
        stopDesync()
    end
end

local function toggleFly(state)
    flyEnabled = state
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
    
    if state then
        flyConnection = RunService.Heartbeat:Connect(function()
            if not Players.LocalPlayer.Character then return end
            local root = Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local humanoid = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            
            if root and humanoid then
                humanoid.PlatformStand = true
                
                local camera = workspace.CurrentCamera
                local moveDirection = Vector3.new()
                
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    moveDirection = moveDirection + Vector3.new(0, 1, 0)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    moveDirection = moveDirection - Vector3.new(0, 1, 0)
                end
                
                if moveDirection.Magnitude > 0 then
                    root.Velocity = moveDirection.Unit * flySpeed
                else
                    root.Velocity = Vector3.new(0, 0, 0)
                end
            end
        end)
    else
        if Players.LocalPlayer.Character then
            local humanoid = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.PlatformStand = false
            end
        end
    end
end

local function toggleSpeed(state)
    speedEnabled = state
    if state and Players.LocalPlayer.Character then
        local humanoid = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = speedValue
        end
    elseif Players.LocalPlayer.Character then
        local humanoid = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
        end
    end
end

local function toggleNoClip(state)
    noClipEnabled = state
    if noClipConnection then
        noClipConnection:Disconnect()
        noClipConnection = nil
    end
    
    if state then
        noClipConnection = RunService.Stepped:Connect(function()
            if Players.LocalPlayer.Character then
                for _, part in pairs(Players.LocalPlayer.Character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    end
end

ESPTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = false,
    Callback = function(value)
        toggleESP(value)
    end
})

ESPTab:CreateToggle({
    Name = "Boxes",
    CurrentValue = true,
    Callback = function(value)
        showBoxes = value
    end
})

ESPTab:CreateToggle({
    Name = "Bones",
    CurrentValue = true,
    Callback = function(value)
        showBones = value
    end
})

ESPTab:CreateToggle({
    Name = "Highlight",
    CurrentValue = true,
    Callback = function(value)
        showHighlight = value
    end
})

ESPTab:CreateToggle({
    Name = "Player Names",
    CurrentValue = true,
    Callback = function(value)
        showNames = value
    end
})

ESPTab:CreateToggle({
    Name = "Distance",
    CurrentValue = true,
    Callback = function(value)
        showDistance = value
    end
})

DesyncTab:CreateToggle({
    Name = "Enable Desync",
    CurrentValue = false,
    Callback = function(value)
        toggleDesync(value)
    end
})

MainTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Callback = function(value)
        toggleFly(value)
    end
})

MainTab:CreateSlider({
    Name = "Fly Speed",
    Range = {20, 200},
    Increment = 10,
    Suffix = "studs",
    CurrentValue = 50,
    Callback = function(value)
        flySpeed = value
    end
})

MainTab:CreateToggle({
    Name = "Speed Hack",
    CurrentValue = false,
    Callback = function(value)
        toggleSpeed(value)
    end
})

MainTab:CreateSlider({
    Name = "Speed Value",
    Range = {16, 200},
    Increment = 5,
    Suffix = "studs",
    CurrentValue = 50,
    Callback = function(value)
        speedValue = value
        if speedEnabled and Players.LocalPlayer.Character then
            local humanoid = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = value
            end
        end
    end
})

MainTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Callback = function(value)
        toggleNoClip(value)
    end
})

Players.PlayerAdded:Connect(function(player)
    if espEnabled then
        task.wait(2)
        createESP(player)
    end
})

Players.PlayerRemoving:Connect(function(player)
    removeESP(player)
end)

Players.LocalPlayer.CharacterAdded:Connect(function()
    if flyEnabled then
        task.wait(1)
        toggleFly(true)
    end
    if speedEnabled then
        task.wait(1)
        toggleSpeed(true)
    end
    if noClipEnabled then
        task.wait(1)
        toggleNoClip(true)
    end
end)
